# === file: main.py ===
import os, json, asyncio

from decimal import Decimal, InvalidOperation
from exchange import OkxExchange
from coin import Coin


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ–º
COINS = {
    "USDT": Coin("USDT"),
    "BTC": Coin("BTC"),
    "ETH": Coin("ETH"),
    "SOL": Coin("SOL"),
    "XRP": Coin("XRP")
}

async def command_loop():
    config_path = os.path.join(os.path.dirname(__file__), "okx_config.json")
    if not os.path.exists(config_path):
        #self._logger.error(f"Missing config file: {config_path}")
        raise FileNotFoundError(config_path)

    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)

    exchange = OkxExchange(config = config, demo = True)
    worker = None
    
    print("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OKX. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    while True:
        cmd_line = await asyncio.to_thread(input, "> ")
        parts = cmd_line.strip().split()
        if not parts:
            continue
        cmd = parts[0].lower()

        try:
            if   cmd == "help":
                help_text = """
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                    coins --> –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Ö id.
                    start --> –ó–∞–ø—É—Å—Ç–∏—Ç—å health-loop.
                    stop --> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å health-loop.
                    balance --> –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç—ã.
                    price --> –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É SYMBOL.
                    order --> –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç‚Äë–æ—Ä–¥–µ—Ä.
                    cancel --> –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä.
                    cancel_all --> –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ SYMBOL.
                    status --> –û—Ç—á—ë—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∏—Ä–∂–∏.
                    help --> –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
                    quit --> –í—ã—Ö–æ–¥.
                """
                print(help_text)

            elif cmd == "coins":
                print("–¢–æ—Ä–≥—É–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:")
                for coin in COINS.values():
                    print(f"  {coin.symbol_id}")
            
            elif cmd == "start":
                if worker and not worker.done():
                    print("‚ùó Run loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    continue
                await exchange.run()
                worker = exchange._run_task
                print("‚úÖ Run loop –∑–∞–ø—É—â–µ–Ω")

            elif cmd == "stop":
                if not worker or worker.done():
                    print("‚ùó Run loop –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                    continue
                print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é run loop...")
                await exchange.stop()
                print("‚úÖ Run loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            elif cmd == "balance":
                inpt_symbol = parts[1] if len(parts) > 1 else "USDT"
                symbol = inpt_symbol.upper()
                
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                try:
                    balance = await exchange.get_balance(coin)
                    if balance is None:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {symbol}")
                    else:
                        print(f"üí∞ –ë–∞–ª–∞–Ω—Å {symbol}: {balance}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                
            elif cmd == "price":
                if len(parts) < 2:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: price BTC")
                    continue
                inpt_symbol = parts[1]
                symbol = inpt_symbol.upper()
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                try:
                    price = await exchange.get_symbol_price(coin)
                    print(f"–¶–µ–Ω–∞ {symbol}: {price}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
                
            elif cmd == "place_limit_order_by_size":
                if len(parts) != 5:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: place_order SYMBOL SIDE PRICE SIZE")
                    print("–ü—Ä–∏–º–µ—Ä: order BTC buy 50000 0.01 (—Ä–∞–∑–º–µ—Ä)")
                    continue
                
                inpt_symbol, inpt_side, inpt_price, inpt_size = parts[1:]
                symbol = inpt_symbol.upper()
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                try:
                    price = Decimal(inpt_price)
                    size = Decimal(inpt_size)
                except InvalidOperation:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PRICE –∏–ª–∏ SIZE")
                    continue
                
                side = inpt_side.lower()
                order_id = await exchange.place_limit_order_by_size(coin, side, price, size)
                
                if order_id:
                    print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω, ID: {order_id}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")

            elif cmd == "place_limit_order_by_amount":
                if len(parts) != 5:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: place_order SYMBOL SIDE PRICE AMOUNT")
                    print("–ü—Ä–∏–º–µ—Ä: order BTC buy 50000 500 (—Å—É–º–º–∞ –≤ USDT)")
                    continue
            
                inpt_symbol, inpt_side, inpt_price, inpt_amount = parts[1:]
                symbol = inpt_symbol.upper()
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                try:
                    price = Decimal(inpt_price)
                    amount = Decimal(inpt_amount)
                except InvalidOperation:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PRICE –∏–ª–∏ AMOUNT")
                    continue
                
                side = inpt_side.lower()
                order_id = await exchange.place_limit_order_by_amount(coin, side, price, amount)
                
                if order_id:
                    print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω, ID: {order_id}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
                
            elif cmd == "cancel_order":
                if len(parts) < 3:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: cancel SYMBOL ORDER_ID")
                    continue
                symbol = parts[1].upper()
                order_id = parts[2]
                
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                    
                ok = await exchange.cancel_order(coin, order_id)
                print("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å")

            elif cmd == "cancel_all_orders":
                if len(parts) < 2:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: cancel_all_orders SYMBOL")
                    continue
                symbol = parts[1].upper()
                
                coin = COINS.get(symbol)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                    
                canceled = await exchange.cancel_all_orders(coin)
                if canceled:
                    print(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {', '.join(canceled)}")
                else:
                    print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

            elif cmd == "status":
                report = await exchange.get_status_report()
                print("üìù –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏:")
                print(f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {report['state']}")
                print(f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {report['last_update']}")
                print(f"  –ë–∞–ª–∞–Ω—Å USDT: {report['balance']}")
                print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π: {'–î–∞' if report['is_operational'] else '–ù–µ—Ç'}")
                print(f"  –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {'–î–∞' if report['needs_attention'] else '–ù–µ—Ç'}")
                print("  –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
                for state in report['state_history']:
                    print(f"    - {state['timestamp']}: {state['from']} ‚Üí {state['to']}")

            elif cmd == "quit":
                if worker and not worker.done():
                    print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                    await exchange.stop()
                    # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
                    await asyncio.sleep(0.5)
                
                # –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await exchange.close()
                print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break

            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}. –í–≤–µ–¥–∏—Ç–µ 'help'.")

        except Exception as e:
            print(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{cmd}': {e}")

if __name__ == "__main__":
    asyncio.run(command_loop())