# === file: exchange.py ===
import time
import hmac
import hashlib
import base64
import json
import asyncio
import logging
from abc import ABC, abstractmethod
from aiohttp import ClientSession
from decimal import Decimal

logger = logging.getLogger("grid_bot")

class Exchange(ABC):
    @abstractmethod
    async def request(self, method: str, path: str, payload=None):
        pass

    @abstractmethod
    async def get_balance(self, ccy: str = "USDT") -> Decimal:
        pass

    @abstractmethod
    async def close(self):
        pass

class OkxExchange(Exchange):
    def __init__(self, api_key, secret_key, passphrase, demo=False):
        self.api_key = api_key
        self.secret_key = secret_key
        self.passphrase = passphrase
        self.base_url = "https://www.okx.com" if not demo else "https://www.okx.com/simulated/v5"
        self.session = ClientSession()

    def _sign(self, timestamp, method, path, body):
        message = f"{timestamp}{method}{path}{body}"
        mac = hmac.new(self.secret_key.encode(), message.encode(), hashlib.sha256)
        return base64.b64encode(mac.digest()).decode()

    def _headers(self, method, path, body=""):
        timestamp = time.strftime('%Y-%m-%dT%H:%M:%S.000Z', time.gmtime())
        sig = self._sign(timestamp, method, path, body)
        headers = {
            "OK-ACCESS-KEY": self.api_key,
            "OK-ACCESS-SIGN": sig,
            "OK-ACCESS-TIMESTAMP": timestamp,
            "OK-ACCESS-PASSPHRASE": self.passphrase,
            "Content-Type": "application/json"
        }
        if self.base_url.endswith("/v5"):
            headers["x-simulated-trading"] = "1"
        return headers

    async def request(self, method, path, payload=None):
        body = json.dumps(payload) if payload else ""
        url = self.base_url + path
        headers = self._headers(method, path, body)
        for _ in range(3):
            try:
                async with self.session.request(method, url, headers=headers, data=body, timeout=10) as resp:
                    data = await resp.json()
                    ok = resp.status == 200 and data.get("code") == "0"
                    return data.get("data", []), ok
            except Exception as e:
                logger.error(f"Request error [{method} {path}]: {e}")
                await asyncio.sleep(1)
        return [], False

    async def get_balance(self, ccy="USDT") -> Decimal:
        data, ok = await self.request("GET", "/api/v5/account/balance")
        if not ok:
            logger.error("Failed to fetch balance")
            return Decimal('0')
        for acc in data[0].get('details', []):
            if acc.get('ccy') == ccy:
                bal = Decimal(acc.get('availBal', '0'))
                logger.info(f"Available {ccy}: {bal}")
                return bal
        return Decimal('0')

    async def close(self):
        await self.session.close()


# === file: strategy.py ===
import asyncio
import logging
from decimal import Decimal
from abc import ABC, abstractmethod

logger = logging.getLogger("grid_bot")

class Strategy(ABC):
    @abstractmethod
    async def on_start(self, exchange):
        pass

    @abstractmethod
    async def on_price_tick(self, exchange, price: Decimal):
        pass

    @abstractmethod
    async def on_order_filled(self, exchange, order_id: str):
        pass

class GridStrategy(Strategy):
    def __init__(self, symbol: str, grid_num: int, step_pct: float, order_amount: float, leverage: int):
        self.symbol = symbol
        self.grid_num = grid_num
        self.step_pct = step_pct / 100
        self.order_amount = Decimal(order_amount)
        self.leverage = leverage
        self.reference_price = None
        self.levels = []
        self.active_orders = {}

    async def on_start(self, exchange):
        data, ok = await exchange.request("GET", f"/api/v5/market/ticker?instId={self.symbol}")
        if not ok:
            logger.error("Failed to fetch initial price")
            return
        price = Decimal(data[0].get('last', '0'))
        self._calc_levels(price)
        await self._place_all(exchange)

    async def on_price_tick(self, exchange, price: Decimal):
        if self.reference_price is None:
            return
        threshold = self.reference_price * self.step_pct * 3
        if abs(price - self.reference_price) > threshold:
            logger.info("GridStrategy: Price moved significantly, recalculating grid")
            self._calc_levels(price)
            await self._place_all(exchange)

    async def on_order_filled(self, exchange, order_id: str):
        level = self.active_orders.pop(order_id, None)
        if level:
            logger.info(f"GridStrategy: Refilling filled order {order_id} at price {level['price']}")
            new_id = await self._place_one(exchange, level)
            if new_id:
                self.active_orders[new_id] = level

    def _calc_levels(self, price: Decimal):
        self.reference_price = price
        self.levels.clear()
        for i in range(1, self.grid_num + 1):
            delta = price * self.step_pct * i
            buy_price = (price - delta).quantize(Decimal('0.0001'))
            sell_price = (price + delta).quantize(Decimal('0.0001'))
            self.levels.append({"price": buy_price, "side": "buy"})
            self.levels.append({"price": sell_price, "side": "sell"})
        logger.info(f"GridStrategy: Calculated {len(self.levels)} levels around {price}")

    async def _place_one(self, exchange, level: dict):
        payload = {
            "instId": self.symbol,
            "tdMode": "isolated",
            "side": level["side"],
            "ordType": "limit",
            "px": str(level["price"]),
            "sz": str((self.order_amount / level["price"] / self.leverage).quantize(Decimal('0.0001')))
        }
        data, ok = await exchange.request("POST", "/api/v5/trade/order", payload)
        if ok and data:
            oid = data[0].get("ordId")
            self.active_orders[oid] = level
            logger.info(f"GridStrategy: Placed {level['side']} @ {level['price']} (ID={oid})")
            return oid
        logger.error(f"GridStrategy: Failed to place order at {level['price']}")
        return None

    async def _place_all(self, exchange):
        await exchange.request("POST", "/api/v5/trade/cancel-all-orders", {"instId": self.symbol})
        self.active_orders.clear()
        await asyncio.sleep(1)
        for lvl in self.levels:
            await self._place_one(exchange, lvl)


# === file: dashboard.py ===
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import requests

class Dashboard:
    def __init__(self, exchange, strategy):
        self.exchange = exchange
        self.strategy = strategy

    def render(self):
        st.title("OKX Grid Bot Dashboard")
        st.subheader(f"Symbol: {self.strategy.symbol}")

        if 'running' not in st.session_state:
            st.session_state.running = False

        col1, col2 = st.columns(2)
        if col1.button("▶️ Start Bot"):
            if not st.session_state.running:
                import asyncio
                asyncio.run(self.strategy.on_start(self.exchange))
                st.session_state.running = True

        if col2.button("⏹ Stop Bot"):
            st.session_state.running = False

        if st.session_state.running:
            df = self.load_candles(self.strategy.symbol)
            fig = go.Figure(data=[go.Candlestick(
                x=df.index, open=df['o'], high=df['h'], low=df['l'], close=df['c']
            )])
            for lvl in self.strategy.levels:
                fig.add_hline(y=float(lvl['price']), line_dash='dash', annotation_text=lvl['side'], opacity=0.5)
            st.plotly_chart(fig, use_container_width=True)

            st.subheader("Active Grid Orders")
            orders = self.strategy.active_orders.copy()
            if orders:
                odf = pd.DataFrame([{'order_id': oid, 'price': lvl['price'], 'side': lvl['side']} for oid,lvl in orders.items()])
                st.dataframe(odf)
            else:
                st.write("No active orders.")

            st.markdown("---")
            st.write("Data refreshes every time you click a control.")

    @st.experimental_memo(ttl=60)
    def load_candles(self, symbol, interval='1m', limit=100):
        url = f"https://www.okx.com/api/v5/market/candles?instId={symbol}&bar={interval}&limit={limit}"
        resp = requests.get(url)
        data = resp.json().get('data', [])
        df = pd.DataFrame(data, columns=['ts','o','h','l','c','vol','vccy','vccyq'])
        df['time'] = pd.to_datetime(df['ts'].astype(int), unit='ms')
        df[['o','h','l','c']] = df[['o','h','l','c']].astype(float)
        return df.set_index('time')


# === file: main.py ===
import os
import json
import logging
from exchange import OkxExchange
from strategy import GridStrategy
from dashboard import Dashboard

logging.basicConfig(level=logging.INFO)

CONFIG_PATH = "okx_config.json"
if not os.path.exists(CONFIG_PATH):
    import streamlit as st
    st.error(f"Missing config file: {CONFIG_PATH}")
    st.stop()

with open(CONFIG_PATH) as f:
    cfg = json.load(f)

exchange = OkxExchange(
    cfg['api_key'], cfg['secret_key'], cfg['passphrase'],
    demo=cfg.get('demo', True)
)
strategy = GridStrategy(
    cfg.get('symbol','BTC-USDT-SWAP'),
    cfg.get('grid_num',5),
    cfg.get('grid_step_pct',1.0),
    cfg.get('order_amount_usdt',10),
    cfg.get('leverage',10)
)

Dashboard(exchange, strategy).render()
