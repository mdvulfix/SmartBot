# === file: main.py ===

import asyncio
from decimal import Decimal, InvalidOperation

from exchange_v6 import OkxExchange
from coin_v1 import Coin

HELP_TEXT = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    coins --> –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Ö id.
    start --> –ó–∞–ø—É—Å—Ç–∏—Ç—å health-loop.
    stop --> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å health-loop.
    balance --> –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç—ã.
    price --> –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É SYMBOL.
    order --> –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç‚Äë–æ—Ä–¥–µ—Ä.
    cancel --> –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä.
    cancel_all --> –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ SYMBOL.
    status --> –û—Ç—á—ë—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∏—Ä–∂–∏.
    help --> –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    quit --> –í—ã—Ö–æ–¥.
"""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–∏–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ–º
COINS = {
    "BTC": Coin("BTC"),
    "ETH": Coin("ETH"),
    "SOL": Coin("SOL"),
    "XRP": Coin("XRP")
}

async def command_loop():
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–ø–∏—Å–æ–∫ inst_id-–æ–≤
    symbols = [coin.instrument_id for coin in COINS.values()]
    exchange = OkxExchange(symbols)
    worker = None
    
    print("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OKX. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    while True:
        cmd_line = await asyncio.to_thread(input, "> ")
        parts = cmd_line.strip().split()
        if not parts:
            continue
        cmd = parts[0].lower()

        try:
            if cmd == "help":
                print(HELP_TEXT)

            elif cmd == "coins":
                print("–¢–æ—Ä–≥—É–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:")
                for coin in COINS.values():
                    print(f"  {coin.base}/{coin.quote}  ‚Üí  {coin.instrument_id}")
            
            elif cmd == "start":
                if worker and not worker.done():
                    print("‚ùó Run loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    continue
                await exchange.run()
                worker = exchange._run_task
                print("‚úÖ Run loop –∑–∞–ø—É—â–µ–Ω")

            elif cmd == "stop":
                if not worker or worker.done():
                    print("‚ùó Run loop –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                    continue
                print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é run loop...")
                await exchange.stop()
                print("‚úÖ Run loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            elif cmd == "balance":
                ccy = parts[1] if len(parts) > 1 else "USDT"
                bal = await exchange.get_balance(ccy)
                if bal is None:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {ccy}")
                else:
                    print(f"üí∞ –ë–∞–ª–∞–Ω—Å {ccy}: {bal}")

            elif cmd == "price":
                if len(parts) < 2:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: price BTC")
                    continue
                base = parts[1].upper()
                coin = COINS.get(base)
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {base} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                instrument_id = coin.instrument_id
                try:
                    price = await exchange.get_symbol_price(instrument_id)
                    print(f"–¶–µ–Ω–∞ {instrument_id}: {price}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")

            elif cmd == "order":
                if len(parts) != 5:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: order SYMBOL SIDE PRICE SIZE")
                    continue
                symbol, side, price_s, size_s = parts[1:]
                coin = COINS.get(symbol.upper())
                if not coin:
                    print(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                try:
                    price = Decimal(price_s)
                    size = Decimal(size_s)
                except InvalidOperation:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PRICE –∏–ª–∏ SIZE")
                    continue
                instrument_id = coin.instrument_id
                order_id = await exchange.place_order(instrument_id, side, price, size)
                if order_id:
                    print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω, ID={order_id}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")

            elif cmd == "cancel":
                if len(parts) != 3:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: cancel SYMBOL ORDER_ID")
                    continue
                symbol, order_id = parts[1], parts[2]
                ok = await exchange.cancel_order(symbol, order_id)
                print("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å")

            elif cmd == "cancel_all":
                if len(parts) != 2:
                    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: cancel_all SYMBOL")
                    continue
                symbol = parts[1]
                canceled = await exchange.cancel_all_orders(symbol)
                print(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {canceled}" if canceled else "‚ùå –ù–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

            elif cmd == "status":
                report = await exchange.get_status_report()
                print("üìù –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏:")
                for k, v in report.items():
                    print(f"  {k}: {v}")

            elif cmd == "quit":
                if worker and not worker.done():
                    print("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                    await exchange.stop()
                print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break

            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}. –í–≤–µ–¥–∏—Ç–µ 'help'.")

        except Exception as e:
            print(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{cmd}': {e}")

if __name__ == "__main__":
    asyncio.run(command_loop())
